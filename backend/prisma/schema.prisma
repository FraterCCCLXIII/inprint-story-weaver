// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  role      UserRole @default(USER)
  
  // Profile information
  bio       String?
  website   String?
  
  // Subscription and billing
  subscriptionTier SubscriptionTier @default(FREE)
  credits          Int              @default(100)
  isActive         Boolean          @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relations
  projects    Project[]
  apiKeys    ApiKey[]
  
  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      ProjectStatus @default(DRAFT)
  
  // Book specifications
  bookType    String?
  targetPages Int?
  targetChapters Int?
  format      BookFormat @default(PDF)
  
  // Content sources
  rssFeed     String?
  textContent String?
  
  // Generated content
  totalWords  Int @default(0)
  totalPages  Int @default(0)
  estimatedCost Decimal? @db.Decimal(10, 2)
  
  // Processing information
  processingStartedAt DateTime?
  processingCompletedAt DateTime?
  processingError      String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  content   Content[]
  chapters  Chapter[]
  exports   Export[]
  
  @@map("projects")
}

model Content {
  id        String   @id @default(cuid())
  type      ContentType
  source    String
  filename  String?
  fileSize  Int?
  mimeType  String?
  
  // Content data (JSON for flexible storage)
  metadata  Json?
  extractedText String?
  
  // Processing status
  isProcessed Boolean @default(false)
  processingError String?
  
  // Timestamps
  createdAt DateTime @default(now())
  processedAt DateTime?
  
  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("content")
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  content   String
  order     Int
  wordCount Int @default(0)
  estimatedPages Int @default(1)
  
  // AI generation metadata
  aiGenerated Boolean @default(false)
  aiPrompt   String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("chapters")
}

model Export {
  id        String   @id @default(cuid())
  format    BookFormat
  filePath  String
  fileSize  Int
  downloadCount Int @default(0)
  
  // Processing status
  status    ExportStatus @default(PROCESSING)
  error     String?
  
  // Timestamps
  createdAt DateTime @default(now())
  completedAt DateTime?
  
  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("exports")
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  permissions String[] // Array of permission strings
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  expiresAt DateTime?
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

model ProcessingJob {
  id        String   @id @default(cuid())
  type      JobType
  status    JobStatus @default(PENDING)
  priority  Int @default(0)
  
  // Job data
  data      Json
  result    Json?
  error     String?
  
  // Progress tracking
  progress  Int @default(0)
  totalSteps Int?
  currentStep Int @default(0)
  
  // Timestamps
  createdAt DateTime @default(now())
  startedAt DateTime?
  completedAt DateTime?
  
  // Relations
  projectId String?
  userId    String?
  
  @@map("processing_jobs")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum SubscriptionTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum ProjectStatus {
  DRAFT
  PROCESSING
  COMPLETED
  FAILED
  ARCHIVED
}

enum BookFormat {
  PDF
  EPUB
  DOCX
  HTML
  MARKDOWN
}

enum ContentType {
  RSS_FEED
  FILE_UPLOAD
  TEXT_INPUT
  URL_IMPORT
  AI_GENERATED
}

enum ExportStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum JobType {
  RSS_PROCESSING
  CONTENT_EXTRACTION
  AI_GENERATION
  BOOK_FORMATTING
  EXPORT_GENERATION
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
